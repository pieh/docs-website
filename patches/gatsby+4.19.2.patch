diff --git a/node_modules/gatsby/dist/utils/webpack-utils.js b/node_modules/gatsby/dist/utils/webpack-utils.js
index 6283226..d751660 100644
--- a/node_modules/gatsby/dist/utils/webpack-utils.js
+++ b/node_modules/gatsby/dist/utils/webpack-utils.js
@@ -35,6 +35,8 @@ var _webpackPlugins = require("./webpack-plugins");
 
 var _eslintConfig = require("./eslint-config");
 
+const { ROUTES_DIRECTORY } = require("../constants")
+
 var _redux = require("../redux");
 
 function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
@@ -68,6 +70,21 @@ const createWebpackUtils = (stage, program) => {
     return rule;
   };
 
+  const fileLoaderCommonOptions = {
+      name: `${assetRelativeRoot}[name]-[hash].[ext]`,
+  }
+  
+  if (stage === `build-html` || stage === `develop-html`) {
+    // build-html and develop-html outputs to `.cache/page-ssr/routes/` (ROUTES_DIRECTORY)
+    // so this config is setting it to output assets to `public` (outputPath)
+    // while preserving "url" (publicPath)
+    fileLoaderCommonOptions.outputPath = path.relative(
+      ROUTES_DIRECTORY,
+      `public`
+    )
+    fileLoaderCommonOptions.publicPath = `/`
+  }
+
   const loaders = {
     json: (options = {}) => {
       return {
@@ -200,7 +217,8 @@ const createWebpackUtils = (stage, program) => {
       return {
         loader: require.resolve(`file-loader`),
         options: {
-          name: `${assetRelativeRoot}[name]-[hash].[ext]`,
+          // name: `${assetRelativeRoot}[name]-[hash].[ext]`,
+          ...fileLoaderCommonOptions,
           ...options
         }
       };
@@ -210,7 +228,8 @@ const createWebpackUtils = (stage, program) => {
         loader: require.resolve(`url-loader`),
         options: {
           limit: 10000,
-          name: `${assetRelativeRoot}[name]-[hash].[ext]`,
+          ...fileLoaderCommonOptions,
+          // name: `${assetRelativeRoot}[name]-[hash].[ext]`,
           fallback: require.resolve(`file-loader`),
           ...options
         }
diff --git a/node_modules/gatsby/dist/utils/webpack/loaders/webpack-remove-exports-loader.js b/node_modules/gatsby/dist/utils/webpack/loaders/webpack-remove-exports-loader.js
index 6a4eec4..f414037 100644
--- a/node_modules/gatsby/dist/utils/webpack/loaders/webpack-remove-exports-loader.js
+++ b/node_modules/gatsby/dist/utils/webpack/loaders/webpack-remove-exports-loader.js
@@ -15,7 +15,7 @@ const webpackRemoveExportsLoader = function webpackRemoveExportsLoader(source, s
     // which is not compatibile with babel's transform options
     inputSourceMap: this.sourceMap ? sourceMap || undefined : undefined,
     sourceFileName: this.resourcePath,
-    sourceMaps: this.sourceMap,
+    sourceMaps: true, // this.sourceMap,
     filename: this.resourcePath,
     presets: options !== null && options !== void 0 && options.jsx ? [[require.resolve(`babel-preset-gatsby/babel-preset-react`), {
       useBuiltIns: true,
@@ -29,7 +29,7 @@ const webpackRemoveExportsLoader = function webpackRemoveExportsLoader(source, s
   }, (err, result) => {
     if (err) {
       callback(err);
-    } else if (result && result.code && result.map) {
+    } else if (result && result.code) {
       callback(null, result === null || result === void 0 ? void 0 : result.code, result === null || result === void 0 ? void 0 : result.map);
     } else {
       callback(null, source, sourceMap);
